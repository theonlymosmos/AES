


import java.util.Scanner;

public class AES {
    // AES S-box and inverse S-box
    private static final int[] S_BOX = {
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    };

    private static final int[] INV_S_BOX = {
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
    };

    private static final int[] RCON = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
    
    private int[][] keySchedule;
    private int[][] invKeySchedule;
    private int rounds;
    private int keySize;

    public AES(int keySize) {
        this.keySize = keySize;
        switch (keySize) {
            case 128: rounds = 10; break;
            case 192: rounds = 12; break;
            case 256: rounds = 14; break;
            default: throw new IllegalArgumentException("Invalid key size");
        }
    }

    private void expandKey(byte[] key) {
        int keyWords = keySize / 32;
        int totalWords = 4 * (rounds + 1);
        keySchedule = new int[totalWords][4];

        // Copy initial key
        for (int i = 0; i < keyWords; i++) {
            keySchedule[i] = new int[]{
                key[4*i] & 0xFF, 
                key[4*i+1] & 0xFF, 
                key[4*i+2] & 0xFF, 
                key[4*i+3] & 0xFF
            };
        }

        // Expand the key
        for (int i = keyWords; i < totalWords; i++) {
            int[] temp = keySchedule[i-1].clone();
            
            if (i % keyWords == 0) {
                // Rotate and substitute
                temp = new int[]{temp[1], temp[2], temp[3], temp[0]};
                for (int j = 0; j < 4; j++) {
                    temp[j] = S_BOX[temp[j] & 0xFF];
                }
                temp[0] ^= RCON[i/keyWords - 1];
            } else if (keyWords > 6 && i % keyWords == 4) {
                // Extra substitution for 256-bit keys
                for (int j = 0; j < 4; j++) {
                    temp[j] = S_BOX[temp[j] & 0xFF];
                }
            }

            // XOR with the word Nk positions back
            for (int j = 0; j < 4; j++) {
                temp[j] ^= keySchedule[i-keyWords][j];
            }
            
            keySchedule[i] = temp;
        }

        // Generate inverse key schedule for decryption
        invKeySchedule = new int[totalWords][4];
        for (int i = 0; i <= rounds; i++) {
            for (int j = 0; j < 4; j++) {
                invKeySchedule[i*4 + j] = keySchedule[(rounds - i)*4 + j];
            }
        }
    }

    private byte[] encryptBlock(byte[] block) {
        int[][] state = new int[4][4];
        
        // Initialize state
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[i][j] = block[i + 4*j] & 0xFF;
            }
        }

        // Initial round
        addRoundKey(state, 0, false);

        // Main rounds
        for (int round = 1; round < rounds; round++) {
            subBytes(state, false);
            shiftRows(state, false);
            mixColumns(state, false);
            addRoundKey(state, round, false);
        }

        // Final round
        subBytes(state, false);
        shiftRows(state, false);
        addRoundKey(state, rounds, false);

        // Convert state to bytes
        byte[] output = new byte[16];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                output[i + 4*j] = (byte) state[i][j];
            }
        }

        return output;
    }

    private byte[] decryptBlock(byte[] block) {
        int[][] state = new int[4][4];
        
        // Initialize state
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[i][j] = block[i + 4*j] & 0xFF;
            }
        }

        // Initial round
        addRoundKey(state, 0, true);

        // Main rounds
        for (int round = 1; round < rounds; round++) {
            invShiftRows(state);
            invSubBytes(state);
            addRoundKey(state, round, true);
            invMixColumns(state);
        }

        // Final round
        invShiftRows(state);
        invSubBytes(state);
        addRoundKey(state, rounds, true);

        // Convert state to bytes
        byte[] output = new byte[16];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                output[i + 4*j] = (byte) state[i][j];
            }
        }

        return output;
    }

    private void subBytes(int[][] state, boolean inverse) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[i][j] = inverse ? INV_S_BOX[state[i][j] & 0xFF] : S_BOX[state[i][j] & 0xFF];
            }
        }
    }

    private void invSubBytes(int[][] state) {
        subBytes(state, true);
    }

    private void shiftRows(int[][] state, boolean inverse) {
        if (!inverse) {
            // Row 0 - no shift
            // Row 1 - shift left 1
            int temp = state[1][0];
            state[1][0] = state[1][1];
            state[1][1] = state[1][2];
            state[1][2] = state[1][3];
            state[1][3] = temp;

            // Row 2 - shift left 2
            swap(state[2], 0, 2);
            swap(state[2], 1, 3);

            // Row 3 - shift left 3 (or right 1)
            temp = state[3][3];
            state[3][3] = state[3][2];
            state[3][2] = state[3][1];
            state[3][1] = state[3][0];
            state[3][0] = temp;
        } else {
            // Inverse shift rows (shift right)
            // Row 0 - no shift
            // Row 1 - shift right 1
            int temp = state[1][3];
            state[1][3] = state[1][2];
            state[1][2] = state[1][1];
            state[1][1] = state[1][0];
            state[1][0] = temp;

            // Row 2 - shift right 2 (same as left 2)
            swap(state[2], 0, 2);
            swap(state[2], 1, 3);

            // Row 3 - shift right 3 (same as left 1)
            temp = state[3][0];
            state[3][0] = state[3][1];
            state[3][1] = state[3][2];
            state[3][2] = state[3][3];
            state[3][3] = temp;
        }
    }

    private void invShiftRows(int[][] state) {
        shiftRows(state, true);
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    private void mixColumns(int[][] state, boolean inverse) {
        for (int i = 0; i < 4; i++) {
            int s0 = state[0][i];
            int s1 = state[1][i];
            int s2 = state[2][i];
            int s3 = state[3][i];

            if (!inverse) {
                state[0][i] = mul(0x02, s0) ^ mul(0x03, s1) ^ s2 ^ s3;
                state[1][i] = s0 ^ mul(0x02, s1) ^ mul(0x03, s2) ^ s3;
                state[2][i] = s0 ^ s1 ^ mul(0x02, s2) ^ mul(0x03, s3);
                state[3][i] = mul(0x03, s0) ^ s1 ^ s2 ^ mul(0x02, s3);
            } else {
                state[0][i] = mul(0x0e, s0) ^ mul(0x0b, s1) ^ mul(0x0d, s2) ^ mul(0x09, s3);
                state[1][i] = mul(0x09, s0) ^ mul(0x0e, s1) ^ mul(0x0b, s2) ^ mul(0x0d, s3);
                state[2][i] = mul(0x0d, s0) ^ mul(0x09, s1) ^ mul(0x0e, s2) ^ mul(0x0b, s3);
                state[3][i] = mul(0x0b, s0) ^ mul(0x0d, s1) ^ mul(0x09, s2) ^ mul(0x0e, s3);
            }
        }
    }

    private void invMixColumns(int[][] state) {
        mixColumns(state, true);
    }

    private int mul(int a, int b) {
        int result = 0;
        for (int i = 0; i < 8; i++) {
            if ((b & 1) != 0) {
                result ^= a;
            }
            boolean highBit = (a & 0x80) != 0;
            a <<= 1;
            if (highBit) {
                a ^= 0x1b; // x^8 + x^4 + x^3 + x + 1
            }
            b >>= 1;
        }
        return result;
    }

    private void addRoundKey(int[][] state, int round, boolean inverse) {
        int[][] schedule = inverse ? invKeySchedule : keySchedule;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[i][j] ^= schedule[round * 4 + j][i];
            }
        }
    }

    private byte[] padMessage(byte[] message) {
        int padLength = 16 - (message.length % 16);
        byte[] padded = new byte[message.length + padLength];
        System.arraycopy(message, 0, padded, 0, message.length);
        
        // PKCS#7 padding
        for (int i = message.length; i < padded.length; i++) {
            padded[i] = (byte) padLength;
        }
        
        return padded;
    }

    private byte[] removePadding(byte[] message) {
        int padLength = message[message.length - 1] & 0xFF;
        if (padLength > 16) return message; // No padding or invalid padding
        
        // Verify padding
        for (int i = message.length - padLength; i < message.length; i++) {
            if ((message[i] & 0xFF) != padLength) {
                return message; // Invalid padding, return as-is
            }
        }
        
        byte[] unpadded = new byte[message.length - padLength];
        System.arraycopy(message, 0, unpadded, 0, unpadded.length);
        return unpadded;
    }

    public byte[] encrypt(byte[] message, byte[] key) {
        if (key.length != keySize/8) {
            throw new IllegalArgumentException("Key must be exactly " + (keySize/8) + " bytes");
        }

        expandKey(key);
        byte[] paddedMsg = padMessage(message);
        byte[] encrypted = new byte[paddedMsg.length];

        for (int i = 0; i < paddedMsg.length; i += 16) {
            byte[] block = new byte[16];
            System.arraycopy(paddedMsg, i, block, 0, 16);
            byte[] encryptedBlock = encryptBlock(block);
            System.arraycopy(encryptedBlock, 0, encrypted, i, 16);
        }

        return encrypted;
    }

    public byte[] decrypt(byte[] message, byte[] key) {
        if (key.length != keySize/8) {
            throw new IllegalArgumentException("Key must be exactly " + (keySize/8) + " bytes");
        }
        if (message.length % 16 != 0) {
            throw new IllegalArgumentException("Message length must be multiple of 16 bytes");
        }

        expandKey(key);
        byte[] decrypted = new byte[message.length];

        for (int i = 0; i < message.length; i += 16) {
            byte[] block = new byte[16];
            System.arraycopy(message, i, block, 0, 16);
            byte[] decryptedBlock = decryptBlock(block);
            System.arraycopy(decryptedBlock, 0, decrypted, i, 16);
        }

        return removePadding(decrypted);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Complete AES Encryption/Decryption");
        System.out.println("---------------------------------");
        
        // Get key size
        System.out.print("Choose key size (128, 192, or 256): ");
        int keySize = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        
        AES aes = new AES(keySize);
        
        // Get key
        int keyLength = keySize / 8;
        System.out.printf("Enter key (must be exactly %d characters): ", keyLength);
        String keyStr = scanner.nextLine();
        
        if (keyStr.length() != keyLength) {
            System.out.printf("Error: Key must be exactly %d characters long\n", keyLength);
            return;
        }
        
        // Get message
        System.out.print("Enter message to encrypt: ");
        String message = scanner.nextLine();
        
        try {
            byte[] key = keyStr.getBytes();
            
            // Encrypt
            byte[] encrypted = aes.encrypt(message.getBytes(), key);
            System.out.println("\nOriginal message: " + message);
            System.out.println("Key: " + keyStr);
            System.out.println("Encrypted (hex): " + bytesToHex(encrypted));
            
            // Decrypt
            byte[] decrypted = aes.decrypt(encrypted, key);
            System.out.println("Decrypted: " + new String(decrypted));
            
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }
    
    private static String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
}
